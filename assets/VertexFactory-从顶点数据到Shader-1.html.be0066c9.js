import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.23357b6d.js";const e="/assets/FVertexBuffer-Code.901974a0.png",p="/assets/CreateVertexBuffer.65ee8955.png",o="/assets/WriteDataToBuffer.e7e5a958.png",c="/assets/CreateIndexBuffer.78fa0ebd.png",i="/assets/TestVF.0565cbba.png",l="/assets/VFHeaderMacro.0a886d46.png",u="/assets/VFMacro.51042cd6.png",r="/assets/InitVIBuffer.05b8a2b3.png",d="/assets/VertexStreamComponent.7af313b4.png",k="/assets/InitDeclaration.ba31a719.png",m="/assets/VFParameter.833d3c12.png",v="/assets/TestVFImpl.d09cddf1.png",f="/assets/SetupUniformData.c7dec0e2.png",b="/assets/ShaderParameterStruc.a88e1e0f.png",x="/assets/ShaderParameterMacro.af7a2633.png",y={},F=t('<h1 id="vertexfactory-\u4ECE\u9876\u70B9\u6570\u636E\u5230-shader-\u4E00-c-vertexfactory" tabindex="-1"><a class="header-anchor" href="#vertexfactory-\u4ECE\u9876\u70B9\u6570\u636E\u5230-shader-\u4E00-c-vertexfactory" aria-hidden="true">#</a> VertexFactory \u4ECE\u9876\u70B9\u6570\u636E\u5230 Shader (\u4E00): C++ VertexFactory</h1><p>VertexFactory \u662F Unreal MeshDrawPipeline \u7684\u4E00\u90E8\u5206\uFF0C\u4E3B\u8981\u8D1F\u8D23\u5BF9 Mesh \u9876\u70B9\u6570\u636E\u7684\u5904\u7406\u4E0E\u4F20\u9012\u5230 VertexShader \u548C VertexShader \u7684\u90E8\u5206\u5B9E\u73B0(VertexFactory.ush).</p><p>\u672C\u7CFB\u5217\u6587\u7AE0\u5C06\u9610\u8FF0\u5982\u4F55\u81EA\u5B9A\u4E49VertexFactory\u4EE5\u4F20\u9012\u9876\u70B9\u6570\u636E\u5230Shader, \u6700\u7EC8\u4F1A\u7ED8\u5236\u51FA\u4E00\u4E2A\u6B63\u65B9\u5F62\u5230\u573A\u666F\u4E2D. \u6E90\u7801\u8FD8\u4F1A\u9644\u5E26 Instancing \u76F8\u5173\u5185\u5BB9, \u4F46\u6587\u4E2D\u4E0D\u4F1A\u8FC7\u591A\u5C55\u5F00\u8BF4\u660E.</p><p>\u672C\u7BC7\u6587\u7AE0\u662F\u672C\u7CFB\u5217\u6587\u7AE0\u7684\u7B2C\u4E00\u7BC7, \u4E3B\u8981\u8BF4\u660E\u81EA\u5B9A\u4E49\u9876\u70B9\u6570\u636E, \u4EE5\u53CA C++ \u7AEF VertexFactory \u7684\u81EA\u5B9A\u4E49.</p><h2 id="\u6D41\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u6D41\u7A0B" aria-hidden="true">#</a> \u6D41\u7A0B</h2><h3 id="\u9876\u70B9\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#\u9876\u70B9\u6570\u636E" aria-hidden="true">#</a> \u9876\u70B9\u6570\u636E</h3><p>\u9996\u5148, \u6211\u4EEC\u9700\u8981\u81EA\u5B9A\u4E49 VertexBuffer \u4E0E IndexBuffer \u7ED3\u6784\u4F53.</p><h4 id="vertexbuffer" tabindex="-1"><a class="header-anchor" href="#vertexbuffer" aria-hidden="true">#</a> VertexBuffer</h4><p>\u8981\u81EA\u5B9A\u4E49 VertexBuffer, \u6211\u4EEC\u9700\u8981\u7EE7\u627F FVertexBuffer \u7ED3\u6784\u4F53, \u5148\u770B\u4E00\u4E0B FVertexBuffer \u7684\u4EE3\u7801:</p><p><img src="'+e+'" alt="FVertexBuffer-Code" loading="lazy"></p><p>FVertexBuffer \u7EE7\u627F\u4E86 FRenderResource. RenderResource \u7C7B\u4F1A\u5C01\u88C5 RHI \u8D44\u6E90, \u800CFVertexBuffer \u5305\u542B\u540D\u4E3A VertexBufferRHI \u7684\u6210\u5458\u53D8\u91CF, \u5E76\u5B9E\u73B0\u4E86\u91CA\u653E\u8D44\u6E90\u7684\u51FD\u6570 ReleaseRHI(). \u6211\u4EEC\u7EE7\u627F\u4E86 FVertexBuffer \u540E, \u9700\u8981\u91CD\u8F7D InitRHI() \u51FD\u6570, \u5728\u5176\u4E2D\u4F7F\u7528\u9876\u70B9\u4FE1\u606F\u521D\u59CB\u5316 VertexBufferRHI.</p><p>\u672C\u4F8B\u4E2D, \u6211\u4EEC\u521B\u5EFA\u4E00\u4E2A\u8868\u793A\u9876\u70B9\u4F4D\u7F6E\u7684 VertexBuffer, \u5355\u4E2A Element \u7C7B\u578B\u4E3A float4.</p><p>\u9996\u5148, \u5728 InitRHI() \u4E2D\u521B\u5EFA VertexBufferRHI, \u5982\u4E0B\u56FE\u6240\u793A, \u5176\u4E2D FVertexInput = FVector4f.</p><p><img src="'+p+'" alt="CreateVertexBuffer" loading="lazy"></p><p>\u5176\u4E2D Usage \u7684 BUF_Static \u5BF9\u5E94 DX12 Default Heap \u4E2D\u7684 Resource, BUF_VertexBuffer \u5219\u6807\u8BB0\u8FD9\u4E2A Buffer \u662F VertexBuffer (\u672C\u4EBA\u7406\u89E3: \u7531\u4E8EDX12\u6240\u6709Buffer\u90FD\u662FID3DResource*, \u6240\u4EE5\u8FD9\u4E2A\u6807\u8BB0\u6CA1\u6709\u5B9E\u8D28\u6027\u7684\u4F5C\u7528). \u800C ResourceState \u5219\u5BF9\u5E94 DX12 \u7684 D3D12_RESOURCE_STATE.</p><p>\u63A5\u4E0B\u6765\u5411 Buffer \u4E2D\u5199\u5165\u6570\u636E, \u5982\u4E0B\u56FE\u6240\u793A.</p><p><img src="'+o+'" alt="WriteDataToBuffer" loading="lazy"></p><p>\u4F7F\u7528 RHILockBuffer \u83B7\u53D6 Buffer \u7684\u5730\u5740, \u5E76\u5411\u5176\u4E2D\u5199\u5165\u6570\u636E, \u8FD9\u91CC\u6211\u4EEC\u4EE5\u5148\u884C\u540E\u5217\u7684\u987A\u5E8F\u5199\u5165\u7F51\u683C\u9876\u70B9\u7684 Position, \u6700\u540EUnlock.</p><h4 id="indexbuffer" tabindex="-1"><a class="header-anchor" href="#indexbuffer" aria-hidden="true">#</a> IndexBuffer</h4><p>\u7136\u540E\u5B9A\u4E49 IndexBuffer. \u5B9A\u4E49 IndexBuffer \u4E5F\u9700\u8981\u7EE7\u627F FIndexBuffer, \u5176\u7ED3\u6784\u4E0E FVertexBuffer \u76F8\u4F3C. \u521B\u5EFA IndexBufferRHI \u65F6, \u6211\u4EEC\u4F7F\u7528\u5728\u521B\u5EFA\u65F6\u5C31\u4F20\u5165Index\u6570\u636E\u7684\u65B9\u5F0F, \u5982\u4E0B\u56FE\u6240\u793A:</p><p><img src="'+c+`" alt="CreateIndexBuffer" loading="lazy"></p><p>\u5C06\u751F\u6210\u7684 Index \u586B\u5165 TResourceArray \u540E, \u5C06 TResourceArray \u8BBE\u7F6E\u5230 CreateInfo \u4E2D, \u5728 CreateBuffer \u65F6\u5C31\u80FD\u5C06\u6570\u636E\u4E0A\u4F20\u5230 Buffer \u91CC.</p><h4 id="\u5B8C\u6574\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u6574\u4EE3\u7801" aria-hidden="true">#</a> \u5B8C\u6574\u4EE3\u7801</h4><p>VertexBuffer \u4E0E IndexBuffer \u7684\u5B8C\u6574\u4EE3\u7801\u5982\u4E0B:</p><details><summary>\u70B9\u51FB\u67E5\u770B\u5B8C\u6574\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// TestVertexBuffer</span>
<span class="token keyword">class</span> <span class="token class-name">FTestVertexBuffer</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FVertexBuffer</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">FTestVertexBuffer</span><span class="token punctuation">(</span>int32 InNumQuadsPerSide<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">NumQuadsPerSide</span><span class="token punctuation">(</span>InNumQuadsPerSide<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">using</span> FVertexInput <span class="token operator">=</span> FVector4f<span class="token punctuation">;</span>
    
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">{</span>
    	<span class="token keyword">const</span> uint32 NumVertsPerSide <span class="token operator">=</span> NumQuadsPerSide<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    	NumVerts <span class="token operator">=</span> NumVertsPerSide<span class="token operator">*</span>NumVertsPerSide<span class="token punctuation">;</span>
    	<span class="token keyword">void</span><span class="token operator">*</span> BufferData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    	FRHIResourceCreateInfo <span class="token function">CreateInfo</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;FTestVertexBuffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">auto</span> Usage <span class="token operator">=</span> BUF_Static<span class="token operator">|</span>BUF_VertexBuffer<span class="token punctuation">;</span>
    	<span class="token keyword">auto</span> ResourceState <span class="token operator">=</span> ERHIAccess<span class="token double-colon punctuation">::</span>VertexOrIndexBuffer<span class="token punctuation">;</span>
    	<span class="token keyword">auto</span> VBSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FVertexInput<span class="token punctuation">)</span><span class="token operator">*</span>NumVerts<span class="token punctuation">;</span>
    	VertexBufferRHI <span class="token operator">=</span> <span class="token function">RHICreateBuffer</span><span class="token punctuation">(</span>
    		VBSize<span class="token punctuation">,</span> Usage<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FVertexInput<span class="token punctuation">)</span><span class="token punctuation">,</span> ResourceState<span class="token punctuation">,</span> CreateInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	BufferData <span class="token operator">=</span> <span class="token function">RHILockBuffer</span><span class="token punctuation">(</span>VertexBufferRHI<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> VBSize<span class="token punctuation">,</span> RLM_WriteOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	FVertexInput<span class="token operator">*</span> Contents <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>FVertexInput<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>BufferData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">for</span><span class="token punctuation">(</span>uint32 Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Y<span class="token operator">&lt;</span>NumVertsPerSide<span class="token punctuation">;</span><span class="token operator">++</span>Y<span class="token punctuation">)</span>
    	<span class="token punctuation">{</span>
    		FVertexInput Pos<span class="token punctuation">;</span>
    		Pos<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Y<span class="token operator">/</span>NumQuadsPerSide <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
    		Pos<span class="token punctuation">.</span>Y <span class="token operator">*=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    		<span class="token keyword">for</span><span class="token punctuation">(</span>uint32 X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>X<span class="token operator">&lt;</span>NumVertsPerSide<span class="token punctuation">;</span><span class="token operator">++</span>X<span class="token punctuation">)</span>
    		<span class="token punctuation">{</span>
    			Pos<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>X<span class="token operator">/</span>NumQuadsPerSide <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
    			Pos<span class="token punctuation">.</span>X <span class="token operator">*=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    			
    			Contents<span class="token punctuation">[</span>X <span class="token operator">+</span> Y<span class="token operator">*</span>NumVertsPerSide<span class="token punctuation">]</span> <span class="token operator">=</span> Pos<span class="token punctuation">;</span>
    		<span class="token punctuation">}</span>
    	<span class="token punctuation">}</span>

    	<span class="token function">RHIUnlockBuffer</span><span class="token punctuation">(</span>VertexBufferRHI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    int32 <span class="token function">GetVertexCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> NumVerts<span class="token punctuation">;</span><span class="token punctuation">}</span>
    
<span class="token keyword">private</span><span class="token operator">:</span>
    int32 NumVerts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> int32 NumQuadsPerSide <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// IndexBuffer</span>
<span class="token keyword">class</span> <span class="token class-name">FTestIndexBuffer</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FIndexBuffer</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">FTestIndexBuffer</span><span class="token punctuation">(</span>int32 InNumQuadsPerSide<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">NumQuadsPerSide</span><span class="token punctuation">(</span>InNumQuadsPerSide<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>NumQuadsPerSide <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			IndexBufferRHI <span class="token operator">=</span> <span class="token generic-function"><span class="token function">CreateIndexBuffer</span><span class="token generic class-name"><span class="token operator">&lt;</span>uint16<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			IndexBufferRHI <span class="token operator">=</span> <span class="token generic-function"><span class="token function">CreateIndexBuffer</span><span class="token generic class-name"><span class="token operator">&lt;</span>uint32<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	int32 <span class="token function">GetIndexCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> NumIndices<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">IndexType</span><span class="token operator">&gt;</span>
	FBufferRHIRef <span class="token function">CreateIndexBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		TResourceArray<span class="token operator">&lt;</span>IndexType<span class="token punctuation">,</span> INDEXBUFFER_ALIGNMENT<span class="token operator">&gt;</span> Indices<span class="token punctuation">;</span>
		Indices<span class="token punctuation">.</span><span class="token function">Reserve</span><span class="token punctuation">(</span>NumQuadsPerSide<span class="token operator">*</span>NumQuadsPerSide<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Prepering Indices Array</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>int32 Morton<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Morton<span class="token operator">&lt;</span>NumQuadsPerSide<span class="token operator">*</span>NumQuadsPerSide<span class="token punctuation">;</span>Morton<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// Z-Order</span>
			int32 X <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">ReverseMortonCode2</span><span class="token punctuation">(</span>Morton<span class="token punctuation">)</span><span class="token punctuation">;</span>
			int32 Y <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">ReverseMortonCode2</span><span class="token punctuation">(</span>Morton <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">bool</span> ForwardDiagonal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// Quad Is Z-Shape</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				ForwardDiagonal <span class="token operator">=</span> <span class="token operator">!</span>ForwardDiagonal<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>Y <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				ForwardDiagonal <span class="token operator">=</span> <span class="token operator">!</span>ForwardDiagonal<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// Z-Order Idx: Left-Up, Right-Up, Left-Down, Right-Down</span>
			int32 Index0 <span class="token operator">=</span> X <span class="token operator">+</span> Y <span class="token operator">*</span> <span class="token punctuation">(</span>NumQuadsPerSide<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			int32 Index1 <span class="token operator">=</span> Index0 <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			int32 Index2 <span class="token operator">=</span> Index0 <span class="token operator">+</span> NumQuadsPerSide <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
			int32 Index3 <span class="token operator">=</span> Index2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

			Indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Index3<span class="token punctuation">)</span><span class="token punctuation">;</span>
			Indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Index1<span class="token punctuation">)</span><span class="token punctuation">;</span>
			Indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ForwardDiagonal<span class="token operator">?</span> Index2<span class="token operator">:</span> Index0<span class="token punctuation">)</span><span class="token punctuation">;</span>
			Indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Index0<span class="token punctuation">)</span><span class="token punctuation">;</span>
			Indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Index2<span class="token punctuation">)</span><span class="token punctuation">;</span>
			Indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ForwardDiagonal<span class="token operator">?</span> Index1<span class="token operator">:</span> Index3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		NumIndices <span class="token operator">=</span> Indices<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> uint32 Size <span class="token operator">=</span> Indices<span class="token punctuation">.</span><span class="token function">GetResourceDataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> uint32 Stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>IndexType<span class="token punctuation">)</span><span class="token punctuation">;</span>

		FRHIResourceCreateInfo <span class="token function">CreateInfo</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;FTestIndexBuffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Indices<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">RHICreateIndexBuffer</span><span class="token punctuation">(</span>Stride<span class="token punctuation">,</span> Size<span class="token punctuation">,</span> BUF_Static<span class="token punctuation">,</span> CreateInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	int32 NumIndices <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> int32 NumQuadsPerSide <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="\u81EA\u5B9A\u4E49-vertexfactory" tabindex="-1"><a class="header-anchor" href="#\u81EA\u5B9A\u4E49-vertexfactory" aria-hidden="true">#</a> \u81EA\u5B9A\u4E49 VertexFactory</h3><p>\u6709\u4E86\u9876\u70B9\u6570\u636E, \u63A5\u4E0B\u6765\u5C31\u8981\u544A\u77E5 Shader \u9876\u70B9\u6570\u636E\u7684\u7C7B\u578B, \u4EE5\u53CA\u5C06\u6570\u636E\u4F20\u5165\u5230 Shader \u4E2D. \u901A\u8FC7\u81EA\u5B9A\u4E49 VertexFactory \u53EF\u4EE5\u5B8C\u6210\u8FD9\u4E24\u4E2A\u4EFB\u52A1, \u4E3B\u8981\u662F\u5728\u91CD\u8F7D\u7684 InitRHI() \u51FD\u6570\u4E2D\u8FDB\u884C.</p><p>\u8981\u81EA\u5B9A\u4E49 VertexFactory, \u6211\u4EEC\u8981\u7EE7\u627F FVertexFactory \u7ED3\u6784\u4F53, \u5E76\u7F16\u5199\u5BF9\u5E94\u7684 VertexFactory.ush Shader\u4EE3\u7801.</p><p>\u7EE7\u627FFVertexFactory, \u5982\u4E0B\u56FE\u6240\u793A:</p><p><img src="`+i+'" alt="TestVF" loading="lazy"></p><h4 id="\u5B8F" tabindex="-1"><a class="header-anchor" href="#\u5B8F" aria-hidden="true">#</a> \u5B8F</h4><p>\u5728 VertexFactory \u7C7B\u58F0\u660E\u5F00\u5934\u52A0\u4E0A <code>DECLARE_VERTEX_FACTORY_TYPE</code>, cpp \u6587\u4EF6\u4E2D\u52A0\u5165 <code>IMPLEMENT_VERTEX_FACTORY_TYPE</code>, \u5982\u56FE:</p><p><img src="'+l+'" alt="VFHeaderMacro" loading="lazy"><img src="'+u+'" alt="VFMacro" loading="lazy">!</p><p>\u5176\u4E2D VertexFactory \u7684\u5B9E\u73B0\u5B8F\u9700\u8981\u6307\u5B9A Shader \u6587\u4EF6\u7684\u4F4D\u7F6E\u4E0E Flags. Shader \u6587\u4EF6\u4F4D\u7F6E\u53EF\u4EE5\u4F7F\u7528 <code>AddShaderSourceDirectoryMapping</code> \u6620\u5C04\u6765\u5F97\u5230, \u6B64\u5904\u4E0D\u5C55\u5F00. \u5BF9\u4E8EFlags, \u524D\u4E09\u4E2A\u5206\u522B\u662F\u652F\u6301\u6750\u8D28, \u52A8\u6001\u5149\u6E90, \u7CBE\u786E\u7684\u4E0A\u4E00\u5E27\u4E16\u754C\u5750\u6807( \u76EE\u524D\u6CA1\u6709\u5B9E\u8D28\u4F5C\u7528 ), \u800C\u6700\u540E\u4E00\u4E2A\u4E0E GPUScene \u6709\u5173.</p><h4 id="vertex-indexbuffer\u4E0Evertexdeclaration" tabindex="-1"><a class="header-anchor" href="#vertex-indexbuffer\u4E0Evertexdeclaration" aria-hidden="true">#</a> Vertex/IndexBuffer\u4E0EVertexDeclaration</h4><p>\u5728 InitRHI() \u521D\u59CB\u5316 Vertex/IndexBuffer</p><p><img src="'+r+'" alt="InitVIBuffer" loading="lazy"></p><p>\u63A5\u4E0B\u6765\u8981\u521B\u5EFA VertexDeclaration, \u7528\u4E8E\u5B9A\u4E49 VertexInput \u7684\u7ED3\u6784. \u9996\u5148\u6211\u4EEC\u9700\u8981\u586B\u5145 FVertexStreamComponent \u7ED3\u6784\u4F53, \u8FD9\u4E2A\u7ED3\u6784\u4F53\u8BB0\u5F55\u5355\u4E2A VertexAttribute \u7684\u4FE1\u606F, \u5305\u62EC VertexBuffer \u4E0E\u9876\u70B9\u63CF\u8FF0.</p><p><img src="'+d+'" alt="VertexStreamComponent" loading="lazy"></p><p>\u4E0B\u4E00\u6B65, \u7528 FVertexStreamComponent \u751F\u6210 FVertexElemt. FVertexElement \u53EA\u5305\u542B\u9876\u70B9\u4FE1\u606F, \u662F\u4E4B\u540E\u7528\u6765\u751F\u6210 VertexDeclaration \u7684\u7ED3\u6784\u4F53, \u800C AccessStreamComponent \u51FD\u6570\u4F1A\u5C06 FVertexStreamComponent \u4E2D\u7684 Vertexbuffer \u53CA\u9644\u52A0\u4FE1\u606F\u63D0\u53D6\u51FA\u6765\u5E76\u52A0\u5165\u5230 Streams \u6570\u7EC4\u4E2D, \u5E76\u8FD4\u56DE FVertexElement. Streams \u6570\u7EC4\u4FDD\u5B58\u7684\u6570\u636E\u6700\u7EC8\u4F1A\u5728\u7ED8\u5236\u65F6\u7ED1\u5B9A\u5230 VertexShader \u4E0A.</p><p><img src="'+k+'" alt="InitDeclaration" loading="lazy"></p><p>\u6700\u540E\u5C06\u751F\u6210\u7684 <code>FVertexElement</code> \u653E\u5165\u6570\u7EC4, \u8C03\u7528 <code>InitDeclaration</code>, VertexFactory \u5C31\u4F1A\u5728\u5185\u90E8\u81EA\u52A8\u521B\u5EFA VertexDeclaration.</p><h4 id="uniformbuffer" tabindex="-1"><a class="header-anchor" href="#uniformbuffer" aria-hidden="true">#</a> UniformBuffer</h4><p>\u6211\u4EEC\u8FD8\u9700\u8981\u5728 VertexFactory \u4E2D\u521B\u5EFA\u4E00\u4E2A UniformBuffer, \u7528\u6765\u63A7\u5236\u9876\u70B9\u989C\u8272.</p><p>\u9996\u5148\u5728\u5934\u6587\u4EF6\u4E2D\u5B9A\u4E49 UniformBuffer \u7ED3\u6784, \u5E76\u5728 CPP \u6587\u4EF6\u4E2D\u5B9E\u73B0\u5B83. \u6211\u4EEC\u5C06 <code>FTestVFParameters</code> \u7ED3\u6784\u4F53\u7ED1\u5B9A\u5230 Shader \u7684 <code>TestVF</code> \u53D8\u91CF\u4E0A, \u8FD9\u6837\u5728 Shader \u4E2D\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\u7C7B\u4F3C <code>TestVF.Color</code> \u7684\u4EE3\u7801\u6765\u8BBF\u95EE\u5176\u6570\u636E.</p><p><img src="'+m+'" alt="VFParameter" loading="lazy"><img src="'+v+'" alt="TestVFImpl" loading="lazy"></p><p>\u5C06 <code>FTestVFBufferRef</code> \u6DFB\u52A0\u5230\u6210\u5458\u53D8\u91CF\u4E2D, \u7136\u540E\u5728 <code>InitRHI()</code> \u51FD\u6570\u4E2D\u521B\u5EFA UniformBuffer. \u8FD9\u91CC\u8BBE\u7F6E Color \u4E3A\u84DD\u8272.</p><p><img src="'+f+`" alt="SetupUniformData" loading="lazy"></p><h4 id="\u5B8C\u6574\u4EE3\u7801-1" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u6574\u4EE3\u7801-1" aria-hidden="true">#</a> \u5B8C\u6574\u4EE3\u7801</h4><p>VertexFactory \u7684\u5B8C\u6574\u4EE3\u7801\u5982\u4E0B:</p><details><summary>\u70B9\u51FB\u67E5\u770B\u5B8C\u6574\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// .h</span>
<span class="token keyword">class</span> <span class="token class-name">FTestVertexFactory</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FVertexFactory</span></span>
<span class="token punctuation">{</span>
	<span class="token function">DECLARE_VERTEX_FACTORY_TYPE</span><span class="token punctuation">(</span>FTestVertexFactory<span class="token punctuation">)</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">using</span> Super <span class="token operator">=</span> FVertexFactory<span class="token punctuation">;</span>
	<span class="token function">FTestVertexFactory</span><span class="token punctuation">(</span>ERHIFeatureLevel<span class="token double-colon punctuation">::</span>Type InFeatureLevel<span class="token punctuation">,</span> int32 InNumQuadsPerSide<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">FTestVertexFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>

	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ReleaseRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
	
	<span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">ShouldCompilePermutation</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVertexFactoryShaderPermutationParameters<span class="token operator">&amp;</span> Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ModifyCompilationEnvironment</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVertexFactoryShaderPermutationParameters<span class="token operator">&amp;</span> Parameters<span class="token punctuation">,</span> FShaderCompilerEnvironment<span class="token operator">&amp;</span> OutEnvironment<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ValidateCompiledResult</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVertexFactoryType<span class="token operator">*</span> Type<span class="token punctuation">,</span> EShaderPlatform Platform<span class="token punctuation">,</span> <span class="token keyword">const</span> FShaderParameterMap<span class="token operator">&amp;</span> ParameterMap<span class="token punctuation">,</span> TArray<span class="token operator">&lt;</span>FString<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutErrors<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">inline</span> FUniformBufferRHIRef <span class="token function">GetTestVFUniformBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> UniformBuffer<span class="token punctuation">;</span><span class="token punctuation">}</span>

	<span class="token keyword">inline</span> FTestVertexBuffer<span class="token operator">*</span> <span class="token function">GetVertexBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> VertexBuffer<span class="token punctuation">;</span><span class="token punctuation">}</span>
	<span class="token keyword">inline</span> FTestIndexBuffer<span class="token operator">*</span> <span class="token function">GetIndexBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> IndexBuffer<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">SetupUniformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	int32 NumQuadsPerSide<span class="token punctuation">;</span>

	FTestVertexBuffer<span class="token operator">*</span> VertexBuffer<span class="token punctuation">;</span>
	FTestIndexBuffer<span class="token operator">*</span> IndexBuffer<span class="token punctuation">;</span>
	FTestVFBufferRef UniformBuffer<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// .cpp</span>
<span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">FTestVertexFactory</span><span class="token punctuation">(</span>ERHIFeatureLevel<span class="token double-colon punctuation">::</span>Type InFeatureLevel<span class="token punctuation">,</span> int32 InNumQuadsPerSide<span class="token punctuation">)</span><span class="token operator">:</span>
	<span class="token function">Super</span><span class="token punctuation">(</span>InFeatureLevel<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function">NumQuadsPerSide</span><span class="token punctuation">(</span>InNumQuadsPerSide<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	VertexBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FTestVertexBuffer</span><span class="token punctuation">(</span>NumQuadsPerSide<span class="token punctuation">)</span><span class="token punctuation">;</span>
	IndexBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FTestIndexBuffer</span><span class="token punctuation">(</span>NumQuadsPerSide<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">FTestVertexFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">delete</span> VertexBuffer<span class="token punctuation">;</span>
	<span class="token keyword">delete</span> IndexBuffer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">InitRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// \u521B\u5EFAUniformBuffer</span>
	<span class="token function">SetupUniformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// \u521D\u59CB\u5316\u9876\u70B9\u6570\u636E</span>
	VertexBuffer<span class="token operator">-&gt;</span><span class="token function">InitResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	IndexBuffer<span class="token operator">-&gt;</span><span class="token function">InitResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// \u521B\u5EFA\u9876\u70B9\u7ED3\u6784\u58F0\u660E</span>
	<span class="token function">check</span><span class="token punctuation">(</span>Streams<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	FVertexStreamComponent PositionVertexStream<span class="token punctuation">;</span>
	PositionVertexStream<span class="token punctuation">.</span>VertexBuffer <span class="token operator">=</span> VertexBuffer<span class="token punctuation">;</span>
	PositionVertexStream<span class="token punctuation">.</span>Stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FVector4f<span class="token punctuation">)</span><span class="token punctuation">;</span>
	PositionVertexStream<span class="token punctuation">.</span>Offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	PositionVertexStream<span class="token punctuation">.</span>VertexStreamUsage <span class="token operator">=</span> EVertexStreamUsage<span class="token double-colon punctuation">::</span>Default<span class="token punctuation">;</span>
	PositionVertexStream<span class="token punctuation">.</span>Type <span class="token operator">=</span> VET_Float4<span class="token punctuation">;</span>

	FVertexStreamComponent InstanceDataVertexStream<span class="token punctuation">;</span>
	InstanceDataVertexStream<span class="token punctuation">.</span>VertexBuffer <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	InstanceDataVertexStream<span class="token punctuation">.</span>Stride <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FVector4f<span class="token punctuation">)</span><span class="token punctuation">;</span>
	InstanceDataVertexStream<span class="token punctuation">.</span>Offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	InstanceDataVertexStream<span class="token punctuation">.</span>VertexStreamUsage <span class="token operator">=</span> EVertexStreamUsage<span class="token double-colon punctuation">::</span>Instancing<span class="token punctuation">;</span>
	InstanceDataVertexStream<span class="token punctuation">.</span>Type <span class="token operator">=</span> VET_Float4<span class="token punctuation">;</span>

	FVertexElement <span class="token function">VertexPositionElement</span><span class="token punctuation">(</span><span class="token function">AccessStreamComponent</span><span class="token punctuation">(</span>PositionVertexStream<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	FVertexElement <span class="token function">InstanceDataElement</span><span class="token punctuation">(</span><span class="token function">AccessStreamComponent</span><span class="token punctuation">(</span>InstanceDataVertexStream<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// StreamIndex = 1</span>

	FVertexDeclarationElementList Elements<span class="token punctuation">;</span>
	Elements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>VertexPositionElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Elements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>InstanceDataElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">InitDeclaration</span><span class="token punctuation">(</span>Elements<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">ReleaseRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>UniformBuffer<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		UniformBuffer<span class="token punctuation">.</span><span class="token function">SafeRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>VertexBuffer<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		VertexBuffer<span class="token operator">-&gt;</span><span class="token function">ReleaseResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>IndexBuffer<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		IndexBuffer<span class="token operator">-&gt;</span><span class="token function">ReleaseResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">FVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">ReleaseRHI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">ShouldCompilePermutation</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVertexFactoryShaderPermutationParameters<span class="token operator">&amp;</span> Parameters<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> Parameters<span class="token punctuation">.</span>MaterialParameters<span class="token punctuation">.</span>MaterialDomain <span class="token operator">==</span> MD_Surface <span class="token operator">||</span> Parameters<span class="token punctuation">.</span>MaterialParameters<span class="token punctuation">.</span>bIsSpecialEngineMaterial<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">ModifyCompilationEnvironment</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVertexFactoryShaderPermutationParameters<span class="token operator">&amp;</span> Parameters<span class="token punctuation">,</span>
	FShaderCompilerEnvironment<span class="token operator">&amp;</span> OutEnvironment<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	OutEnvironment<span class="token punctuation">.</span><span class="token function">SetDefine</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;TEST_VF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">ValidateCompiledResult</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVertexFactoryType<span class="token operator">*</span> Type<span class="token punctuation">,</span> EShaderPlatform Platform<span class="token punctuation">,</span>
	<span class="token keyword">const</span> FShaderParameterMap<span class="token operator">&amp;</span> ParameterMap<span class="token punctuation">,</span> TArray<span class="token operator">&lt;</span>FString<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutErrors<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">FTestVertexFactory</span><span class="token double-colon punctuation">::</span><span class="token function">SetupUniformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	FTestVFParameters UniformParams<span class="token punctuation">;</span>
	UniformParams<span class="token punctuation">.</span>Color <span class="token operator">=</span> FColor<span class="token double-colon punctuation">::</span>Blue<span class="token punctuation">.</span><span class="token function">ReinterpretAsLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	UniformBuffer <span class="token operator">=</span> <span class="token class-name">FTestVFBufferRef</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUniformBufferImmediate</span><span class="token punctuation">(</span>UniformParams<span class="token punctuation">,</span> UniformBuffer_MultiFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="fvertexfactoryshaderparameters" tabindex="-1"><a class="header-anchor" href="#fvertexfactoryshaderparameters" aria-hidden="true">#</a> FVertexFactoryShaderParameters</h3><p>\u63A5\u4E0B\u6765\u8981\u7EE7\u627F\u5B9E\u73B0 FVertexFactoryShaderParameters \u7ED3\u6784, \u7528\u4E8E\u7ED1\u5B9A UniformBuffer \u5230 Shader \u4E2D. \u9700\u8981\u5B9E\u73B0 Bind \u4E0E GetElementShaderBindings \u4E24\u4E2A\u51FD\u6570</p><p><img src="`+b+'" alt="ShaderParameterStruc" loading="lazy"></p><p>\u9996\u5148\u8981\u5728\u7C7B\u5F00\u5934\u6DFB\u52A0 <code>DECLARE_TYPE_LAYOUT</code> \u58F0\u660E</p><p>Bind \u51FD\u6570\u53EF\u4EE5\u5C06 <code>LAYOUT_FIELD</code> \u5B8F\u58F0\u660E\u7684\u6210\u5458\u53D8\u91CF\u7ED1\u5B9A\u5230 Shader \u4E2D. \u6211\u4EEC\u4E4B\u524D\u5DF2\u7ECF\u4F7F\u7528 <code>GLOBAL_SHADER_PARAMETER_STRUCT</code> \u5B8F\u6765\u7ED1\u5B9A, \u6240\u4EE5\u8FD9\u4E2A\u51FD\u6570\u7559\u7A7A.</p><p>\u5728 <code>GetElementShaderBindings</code> \u51FD\u6570\u4E2D, \u6211\u4EEC\u4F7F\u7528<code>ShaderBinding.Add(...)</code>\u5C06 VertexFactory \u7684 UniformBuffer \u6570\u636E\u7ED1\u5B9A\u5230 Shader \u4E0A.</p><p>\u6700\u540E\u8FD8\u9700\u8981\u6DFB\u52A0 <code>IMPLEMENT_TYPE_LAYOUT</code> \u4E0E <code>IMPLEMENT_VERTEX_FACTORY_PARAMETER_TYPE</code> \u5B8F, \u5E76\u5C06\u5176\u4E0E VertexFactory \u7ED1\u5B9A\u5728\u4E00\u8D77, \u8FD9\u6837 ShaderParameters \u4E2D\u7684\u53C2\u6570\u7ED1\u5B9A\u5C31\u4F1A\u81EA\u52A8\u5E94\u7528\u5230 VertexFactory \u5BF9\u5E94\u7684 Shader \u4E0A.</p><p><img src="'+x+`" alt="ShaderParameterMacro" loading="lazy"></p><p>\u5B8C\u6574\u6E90\u7801\u5982\u4E0B:</p><details><summary>\u70B9\u51FB\u67E5\u770B\u5B8C\u6574\u4EE3\u7801</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">FTestVFShaderParameters</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FVertexFactoryShaderParameters</span></span>
<span class="token punctuation">{</span>
	<span class="token function">DECLARE_TYPE_LAYOUT</span><span class="token punctuation">(</span>FTestVFShaderParameters<span class="token punctuation">,</span> NonVirtual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">Bind</span><span class="token punctuation">(</span><span class="token keyword">const</span> FShaderParameterMap<span class="token operator">&amp;</span> ParameterMap<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	
	<span class="token keyword">void</span> <span class="token function">GetElementShaderBindings</span><span class="token punctuation">(</span>
		<span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token class-name">FSceneInterface</span><span class="token operator">*</span> Scene<span class="token punctuation">,</span>
		<span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token class-name">FSceneView</span><span class="token operator">*</span> View<span class="token punctuation">,</span>
		<span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token class-name">FMeshMaterialShader</span><span class="token operator">*</span> Shader<span class="token punctuation">,</span>
		<span class="token keyword">const</span> EVertexInputStreamType InputStreamType<span class="token punctuation">,</span>
		ERHIFeatureLevel<span class="token double-colon punctuation">::</span>Type FeatureLevel<span class="token punctuation">,</span>
		<span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token class-name">FVertexFactory</span><span class="token operator">*</span> VertexFactory<span class="token punctuation">,</span>
		<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">FMeshBatchElement</span><span class="token operator">&amp;</span> BatchElement<span class="token punctuation">,</span>
		<span class="token keyword">class</span> <span class="token class-name">FMeshDrawSingleShaderBindings</span><span class="token operator">&amp;</span> ShaderBindings<span class="token punctuation">,</span>
		FVertexInputStreamArray<span class="token operator">&amp;</span> VertexStreams<span class="token punctuation">)</span> <span class="token keyword">const</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">const</span> FTestVertexFactory<span class="token operator">*</span> VF <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> FTestVertexFactory<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>VertexFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// \u7ED1\u5B9A Shader Parameter(Uniform Buffer)</span>
		ShaderBindings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Shader<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetUniformBufferParameter</span><span class="token generic class-name"><span class="token operator">&lt;</span>FTestVFParameters<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> VF<span class="token operator">-&gt;</span><span class="token function">GetTestVFUniformBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//...</span>
		<span class="token keyword">auto</span> InstanceBuffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> FTestInstanceDataBuffers<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>BatchElement<span class="token punctuation">.</span>UserData<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>VertexStreams<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			FVertexInputStream<span class="token operator">*</span> InstanceInputStream <span class="token operator">=</span> VertexStreams<span class="token punctuation">.</span><span class="token function">FindByPredicate</span><span class="token punctuation">(</span>
				<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVertexInputStream<span class="token operator">&amp;</span> InStream<span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token keyword">return</span> InStream<span class="token punctuation">.</span>StreamIndex <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Index set at InitRHI()</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">check</span><span class="token punctuation">(</span>InstanceInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">check</span><span class="token punctuation">(</span>InstanceBuffer<span class="token operator">-&gt;</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			InstanceInputStream<span class="token operator">-&gt;</span>VertexBuffer <span class="token operator">=</span> InstanceBuffer<span class="token operator">-&gt;</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="\u7ED3\u5C3E" tabindex="-1"><a class="header-anchor" href="#\u7ED3\u5C3E" aria-hidden="true">#</a> \u7ED3\u5C3E</h3><p>\u4E0B\u7BC7\u6587\u7AE0\u4F1A\u8BF4\u660E\u5982\u4F55\u81EA\u5B9A\u4E49 VertexFactory.ush \u4EE5\u5339\u914D C++ \u7AEF\u7684 VertexFactory.</p>`,63),V=[F];function I(S,h){return s(),a("div",null,V)}const g=n(y,[["render",I],["__file","VertexFactory-\u4ECE\u9876\u70B9\u6570\u636E\u5230Shader-1.html.vue"]]);export{g as default};
